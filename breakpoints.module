<?php

use \Drupal\breakpoints\Breakpoint;
use \Drupal\breakpoints\BreakpointSet;

/**
 * @file
 * Breakpoints
 */

define('BREAKPOINTS_SOURCE_TYPE_THEME', 'theme');
define('BREAKPOINTS_SOURCE_TYPE_MODULE', 'module');
define('BREAKPOINTS_SOURCE_TYPE_CUSTOM', 'custom');

/**
 * Implements hook_enable().
 * Import breakpoints from all enabled themes.
 */
function breakpoints_enable() {
  config_install_default_config('module', 'breakpoints');
  $themes = list_themes();
  breakpoints_themes_enabled(array_keys($themes));
}

/**
 * Implements hook_themes_enabled();
 * Import breakpoints from all new enabled themes.
 */
function breakpoints_themes_enabled($theme_list) {
  $themes = list_themes();
  foreach ($theme_list as $theme_key) {
    if ($themes[$theme_key]->status) {
      // Check theme_key.breakpoints.yml first
      $theme_breakpoints = breakpoints_get_theme_breakpoint_list($theme_key);
      // Fallback to theme_key.info
      if (empty($theme_breakpoints) && isset($themes[$theme_key]->info['breakpoints'])) {
        $theme_breakpoints = $themes[$theme_key]->info['breakpoints'];
      }
      if (!empty($theme_breakpoints)) {
        $weight = 0;
        // Build a breakpoint set for each theme
        $breakpointset = new BreakpointSet();
        $breakpointset->id = $theme_key;
        $breakpointset->label = $themes[$theme_key]->info['name'];
        $breakpointset->source_type = Breakpoint::BREAKPOINTS_SOURCE_TYPE_THEME;
        foreach ($theme_breakpoints as $name => $media_query) {
          $breakpoint = new Breakpoint;
          $breakpoint->name = $name;
          $breakpoint->label = ucfirst($name);
          $breakpoint->media_query = $media_query;
          $breakpoint->source = $theme_key;
          $breakpoint->source_type = Breakpoint::BREAKPOINTS_SOURCE_TYPE_THEME;
          $breakpoint->status = TRUE;
          $breakpoint->weight = $weight++;
          $breakpoint->save();
          $breakpointset->breakpoints[$breakpoint->id()] = $breakpoint;
        }
        $breakpointset->save();
        $uri = $breakpointset->uri();
        if ($uri) {
          $uri_options = $uri;
          unset($uri_options['path']);
          $uri = $uri['path'];
        }
        $message = t('The breakpoints from theme %theme are imported and !setlink.', array(
          '%theme' => check_plain($themes[$theme_key]->info['name']),
          '!setlink' => module_exists('breakpoints_ui') && $uri ? l(t('a new breakpoint set is created'), $uri, $uri_options) : t('a new breakpoint set is created'),
        ));
        drupal_set_message($message, 'status');
      }
    }
  }
}

/**
 * Implements hook_themes_disabled();
 * Remove breakpoints from all disabled themes.
 */
function breakpoints_themes_disabled($theme_list) {
  $breakpointsets = entity_load_multiple('breakpoints_breakpointset', $theme_list);
  foreach ($breakpointsets as $breakpointset) {
    $breakpointset->delete();
    // delete all breakpoints defined by this theme.
    $names = drupal_container()->get('config.storage')->listAll('breakpoints.breakpoint.' . BREAKPOINTS_SOURCE_TYPE_THEME . '.' . $breakpointset->id() . '.');
    $entity_info = entity_get_info('breakpoints_breakpoint');

    foreach ($names as &$name) {
      $name = substr($name, strlen($entity_info['config prefix']) + 1);
    }
    $breakpoints = entity_load_multiple('breakpoints_breakpoint', $names);

    foreach ($breakpoints as $breakpoint) {
      $breakpoint->delete();
    }
  }
}

/**
 * Load general settings.
 */
function breakpoints_settings() {
  $config = config('breakpoints');
  if ($config->isNew()) {
    return FALSE;
  }
  return (object)$config->get();
}

/**
 * Save general settings.
 */
function breakpoints_settings_save($multipliers) {
  $config = config('breakpoints');
  if ($config->isNew()) {
    return FALSE;
  }
  $config->set('multipliers', $multipliers);
  $config->save();
}

/**
 * Reload breakpoint sets as they were defined in the theme.
 * @param string $theme_key
 * @return BreakpointSet
 */
function breakpoints_breakpoints_set_reload_from_theme($theme_key) {
  // Clear caches so theme.info is fresh.
  system_rebuild_theme_data();
  drupal_theme_rebuild();

  $themes = list_themes();
  if ($themes[$theme_key]->status) {
    // Check theme_key.breakpoints.yml first
    $theme_breakpoints = breakpoints_get_theme_breakpoint_list($theme_key);
    // Fallback to theme_key.info
    if (empty($theme_breakpoints) && isset($themes[$theme_key]->info['breakpoints'])) {
      $theme_breakpoints = $themes[$theme_key]->info['breakpoints'];
    }
    if (!empty($theme_breakpoints)) {
      $weight = 0;
      // Build a set for each theme
      $breakpointset = new BreakpointSet();
      $breakpointset->id = $theme_key;
      $breakpointset->label = $themes[$theme_key]->info['name'];
      $breakpointset->source_type = Breakpoint::BREAKPOINTS_SOURCE_TYPE_THEME;
      foreach ($theme_breakpoints as $name => $media_query) {
        $breakpoint = new Breakpoint;
        $breakpoint->name = $name;
        $breakpoint->label = ucfirst($name);
        $breakpoint->media_query = $media_query;
        $breakpoint->source = $theme_key;
        $breakpoint->source_type = Breakpoint::BREAKPOINTS_SOURCE_TYPE_THEME;
        $breakpoint->status = TRUE;
        $breakpoint->weight = $weight++;
        $breakpointset->breakpoints[$breakpoint->get_config_name()] = $breakpoint;
      }
    }
    return $breakpointset;
  }
  return FALSE;
}

/**
 * Get a list of available breakpoints from a specified theme.
 *
 * @param $theme_key
 *   The name of a theme.
 * @return
 *   An array of breakpoints in the form $breakpoint['name'] = 'media query'.
 */
function breakpoints_get_theme_breakpoint_list($theme_key) {
  $themes = list_themes();
  if (!isset($themes[$theme_key])) {
    return array();
  }

  $config = config($theme_key . '.breakpoints');
  if ($config) {
    return $config->get();
  }
  return array();
}

/**
 * Implements hook_entity_info().
 */
function breakpoints_entity_info() {
  // Breakpoint
  $types['breakpoints_breakpoint'] = array(
    'label' => 'Breakpoint',
    'entity class' => 'Drupal\breakpoints\Breakpoint',
    'controller class' => 'Drupal\Core\Config\Entity\ConfigStorageController',
    'config prefix' => 'breakpoints.breakpoint',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'label',
      'uuid' => 'uuid',
    ),
  );

  // Breakpoint set
  $types['breakpoints_breakpointset'] = array(
    'label' => 'Breakpoint Set',
    'entity class' => 'Drupal\breakpoints\BreakpointSet',
    'controller class' => 'Drupal\breakpoints\BreakpointSetController',
    'config prefix' => 'breakpoints.breakpointset',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'label',
      'uuid' => 'uuid',
    ),
  );

  return $types;
}

/**
 * Load one breakpoint set by its identifier.
 */
function breakpoints_breakpointset_load($id) {
  return entity_load('breakpoints_breakpointset', $id);
}

/**
 * Load all breakpooint sets.
 */
function breakpoints_breakpointset_load_all() {
  $breakpointsets = entity_load_multiple('breakpoints_breakpointset');
  return $breakpointsets;
}

/**
 * Load one breakpoint by its identifier.
 */
function breakpoints_breakpoint_load($id) {
  return entity_load('breakpoints_breakpoint', $id);
}

/**
 * Load all breakpoints.
 */
function breakpoints_breakpoint_load_all() {
  $breakpoints = entity_load_multiple('breakpoints_breakpoint');
  return $breakpoints;
}
