<?php

use \Drupal\breakpoints\Breakpoint;
use \Drupal\breakpoints\BreakpointSet;

/**
 * @file
 * Breakpoints
 */

define('BREAKPOINTS_SOURCE_TYPE_THEME', 'theme');
define('BREAKPOINTS_SOURCE_TYPE_MODULE', 'module');
define('BREAKPOINTS_SOURCE_TYPE_CUSTOM', 'custom');
define('BREAKPOINTS_GROUP', 'group');

/**
 * Implements hook_enable().
 * Import breakpoints from all enabled themes.
 */
function breakpoints_enable() {
  config_install_default_config('module', 'breakpoints');
  $themes = list_themes();
  breakpoints_themes_enabled(array_keys($themes));
}

/**
 * Implements hook_themes_enabled();
 * Import breakpoints from all new enabled themes.
 */
function breakpoints_themes_enabled($theme_list) {
  $themes = list_themes();
  foreach ($theme_list as $theme_key) {
    if ($themes[$theme_key]->status) {
      // Check theme_key.breakpoints.yml first
      $theme_breakpoints = breakpoints_get_theme_breakpoint_list($theme_key);
      // Fallback to theme_key.info
      if (empty($theme_breakpoints) && isset($themes[$theme_key]->info['breakpoints'])) {
        $theme_breakpoints = $themes[$theme_key]->info['breakpoints'];
      }
      if (!empty($theme_breakpoints)) {
        $weight = 0;
        // Build a group for each theme
        $breakpointset = new BreakpointSet();
        $breakpointset->machine_name = $theme_key;
        $breakpointset->name = $themes[$theme_key]->info['name'];
        $breakpointset->type = Breakpoint::BREAKPOINTS_SOURCE_TYPE_THEME;
        foreach ($theme_breakpoints as $name => $media_query) {
          $breakpoint = new Breakpoint;
          $breakpoint->label = $name;
          $breakpoint->media_query = $media_query;
          $breakpoint->source = $theme_key;
          $breakpoint->source_type = Breakpoint::BREAKPOINTS_SOURCE_TYPE_THEME;
          $breakpoint->status = TRUE;
          $breakpoint->weight = $weight++;
          $breakpoint->save();
          $breakpointset->breakpoints[] = $breakpoint->id();
        }
        $breakpointset->save();
        $message = t('The breakpoints from theme %theme are imported and !grouplink.', array(
          '%theme' => check_plain($themes[$theme_key]->info['name']),
          '!grouplink' => l(t('a new group is created'), 'admin/config/media/breakpoints/groups/' . $theme_key),
        ));
        drupal_set_message($message, 'status');
      }
    }
  }
}

/**
 * Implements hook_themes_disabled();
 * Remove breakpoints from all disabled themes.
 */
function breakpoints_themes_disabled($theme_list) {
  $themes = list_themes();
  foreach ($theme_list as $theme_key) {
    $breakpoints = breakpoints_breakpoint_load_all_theme($theme_key);
    foreach ($breakpoints as $breakpoint) {
      breakpoints_breakpoint_delete($breakpoint, $theme_key);
    }
    breakpoints_breakpoint_group_delete_by_name($theme_key);
  }
}

/**
 * Load general settings.
 */
function breakpoints_settings() {
  $config = config('breakpoints');
  if ($config->isNew()) {
    return FALSE;
  }
  return (object)$config->get();
}

/**
 * Save general settings.
 */
function breakpoints_settings_save($multipliers) {
  $config = config('breakpoints');
  if ($config->isNew()) {
    return FALSE;
  }
  $config->set('multipliers', $multipliers);
  $config->save();
}

/**
 * Sort breakpoints by weight.
 */
function _breakpoints_sort_by_weight($a, $b) {
  if (isset($a->weight) && isset($b->weight)) {
    if ($a->weight == $b->weight) {
      return 0;
    }
    return ($a->weight < $b->weight) ? -1 : 1;
  }
  return 0;
}

/**
 * Sort breakpoints by weight.
 */
function _breakpoints_sort_by_weight_array($a, $b) {
  return _breakpoints_sort_by_weight((object)$a, (object)$b);
}

/**
 * Construct config name.
 */
function breakpoints_breakpoint_config_name($breakpoints_breakpoint) {
  if (is_string($breakpoints_breakpoint)) {
    return $breakpoints_breakpoint;
  }
  else {
    // Check for illegal values in breakpoint source type.
    if (!in_array($breakpoints_breakpoint->source_type, array(BREAKPOINTS_SOURCE_TYPE_CUSTOM, BREAKPOINTS_SOURCE_TYPE_MODULE, BREAKPOINTS_SOURCE_TYPE_THEME))) {
      throw new Exception(
          t(
            'Expected one of \'@custom\', \'@module\' or \'@theme\' for breakpoint source_type property but got \'@sourcetype\'.',
            array(
              '@custom' => BREAKPOINTS_SOURCE_TYPE_CUSTOM,
              '@module' => BREAKPOINTS_SOURCE_TYPE_MODULE,
              '@theme' => BREAKPOINTS_SOURCE_TYPE_THEME,
              '@sourcetype' => $breakpoints_breakpoint->source_type,
            )
          )
      );
    }
    // Check for illegal characters in breakpoint source.
    if (preg_match('/[^a-z_]+/', $breakpoints_breakpoint->source)) {
      throw new Exception(t('Invalid value \'@source\' for breakpoint source property. Breakpoint source property can only contain lowercase letters and underscores.', array('@source' => $breakpoints_breakpoint->source)));
    }
    // Check for illegal characters in breakpoint names.
    if (preg_match('/[^0-9a-z_\-]/', $breakpoints_breakpoint->name)) {
      throw new Exception(t('Invalid value \'@name\' for breakpoint name property. Breakpoint name property can only contain lowercase alphanumeric characters, underscores (_), and hyphens (-).', array('@name' => $breakpoints_breakpoint->name)));
    }
    return 'breakpoints'
      . '.' . $breakpoints_breakpoint->source_type
      . '.' . $breakpoints_breakpoint->source
      . '.' . $breakpoints_breakpoint->name;
  }
}

/**
 * Element validate callback for breakpoint names.
 */
function breakpoint_name_validate($element, $form_state) {
  // Check for illegal characters in breakpoint names.
  if (preg_match('/[^0-9a-z_\-]/', $element['#value'])) {
    form_set_error(implode('][', $element['#parents']), t('Please only use lowercase alphanumeric characters, underscores (_), and hyphens (-) for breakpoint names.'));
  }
}

/**
 * Load a single breakpoint.
 */
function xxx_breakpoints_breakpoint_load($name, $source, $source_type) {
  return breakpoints_breakpoint_load_by_fullkey('breakpoints.' . $source_type . '.' . $source . '.' . $name);
}

/**
 * Load a single breakpoint using the full config key.
 */
function breakpoints_breakpoint_load_by_fullkey($name) {
  $config = config($name);
  if ($config->isNew()) {
    return FALSE;
  }
  $data = $config->get();
  $data += breakpoints_breakpoint_empty_array();
  return (object)$data;
}

/**
 * Load all breakpoints.
 */
function xxx_breakpoints_breakpoint_load_all($theme_key = '') {
  $breakpoints_user = breakpoints_breakpoint_load_all_custom();
  $breakpoints_module = breakpoints_breakpoint_load_all_module();
  $breakpoints_theme = breakpoints_breakpoint_load_all_theme($theme_key);
  $breakpoints = array_merge($breakpoints_theme, $breakpoints_module, $breakpoints_user);
  uasort($breakpoints, '_breakpoints_sort_by_weight');
  return $breakpoints;
}

/**
 * Load all enabled breakpoints.
 */
function breakpoints_breakpoint_load_all_active($theme_key = '') {
  $breakpoints = breakpoints_breakpoint_load_all($theme_key);
  $enabled = array();
  if (!empty($breakpoints)) {
    foreach ($breakpoints as $breakpoint_name => $breakpoint) {
      if ($breakpoint->status) {
        $enabled[$breakpoint_name] = $breakpoint;
      }
    }
  }
  return $enabled;
}

/**
 * Load all breakpoints by source type.
 */
function _breakpoints_breakpoint_load_all_by_type($source_type, $source = '') {
  $breakpoints = array();
  // $name has to end in a dot.
  $name = 'breakpoints.' . $source_type . '.';
  if (isset($source) && !empty($source)) {
    $name .= $source . '.';
  }
  $breakpoint_names = config_get_storage_names_with_prefix($name);
  foreach ($breakpoint_names as $breakpoint_name) {
    $breakpoints[$breakpoint_name] = breakpoints_breakpoint_load_by_fullkey($breakpoint_name);
  }
  uasort($breakpoints, '_breakpoints_sort_by_weight');
  return $breakpoints;
}

/**
 * Load all custom breakpoints.
 */
function breakpoints_breakpoint_load_all_custom() {
  $breakpoints = _breakpoints_breakpoint_load_all_by_type(BREAKPOINTS_SOURCE_TYPE_CUSTOM);
  return $breakpoints;
}

/**
 * Load all user defined breakpoints.
 */
function breakpoints_breakpoint_load_all_module() {
  return _breakpoints_breakpoint_load_all_by_type(BREAKPOINTS_SOURCE_TYPE_MODULE);
}

/**
 * Load all breakpoints from the theme.
 */
function breakpoints_breakpoint_load_all_theme($theme_key = '') {
  return _breakpoints_breakpoint_load_all_by_type(BREAKPOINTS_SOURCE_TYPE_THEME, $theme_key);
}

/**
 * Empty breakpoint object.
 */
function breakpoints_breakpoint_empty_object() {
  return (object)breakpoints_breakpoint_empty_array();
}

/**
 * Empty breakpoint array.
 */
function breakpoints_breakpoint_empty_array() {
  return array(
    'name' => '',
    'breakpoint' => '',
    'source' => '',
    'source_type' => '',
    'theme' => '',
    'status' => '',
    'weight' => 0,
    'multipliers' => '',
  );
}

/**
 * Save a single breakpoint.
 */
function breakpoints_breakpoint_save($breakpoints_breakpoint) {
  $name = breakpoints_breakpoint_config_name($breakpoints_breakpoint);
  $config = config($name);

  $config->set('name', $breakpoints_breakpoint->name);
  $config->set('breakpoint', $breakpoints_breakpoint->breakpoint);
  $config->set('source', $breakpoints_breakpoint->source);
  $config->set('source_type', $breakpoints_breakpoint->source_type);
  $config->set('status', $breakpoints_breakpoint->status);
  $config->set('weight', $breakpoints_breakpoint->weight);
  $config->set('multipliers', $breakpoints_breakpoint->multipliers);
  $config->save();

  $data = $config->get();
  $data += breakpoints_breakpoint_empty_array();
  return (object)$data;
}

/**
 * Delete a single breakpoint.
 */
function breakpoints_breakpoint_delete($breakpoint) {
  $name = breakpoints_breakpoint_config_name($breakpoint);
  return breakpoints_breakpoint_delete_by_fullkey($name);
}

/**
 * Delete a single breakpoint.
 */
function breakpoints_breakpoint_delete_by_fullkey($name) {
  $config = config($name);
  if ($config && !$config->isNew()) {
    $config->delete();
  }
}

/**
 * Toggle status of a single breakpoint.
 * @param object|string $breakpoints_breakpoint
 *   Either a breakpoint object or a breakpoint config name.
 */
function breakpoints_breakpoint_toggle_status(&$breakpoints_breakpoint) {
  $name = breakpoints_breakpoint_config_name($breakpoints_breakpoint);
  $config = config($name);
  if ($config && !$config->isNew()) {
    $status = !$config->get('status');
    $config->set('status', $status);
    $config->save();
    if (is_object($breakpoints_breakpoint)) {
      $breakpoints_breakpoint->status = $status;
    }
  }
}


/**
 * Empty breakpoint group object.
 */
function breakpoints_breakpoint_group_empty_object() {
  return (object)breakpoints_breakpoint_group_empty_array();
}

/**
 * Empty breakpoint group array.
 */
function breakpoints_breakpoint_group_empty_array() {
  return array(
    'machine_name' => '',
    'name' => '',
    'breakpoints' => array(),
    'type' => 'custom',
    'overridden' => FALSE,
  );
}

/**
 * Check if a group name already exists.
 */
function breakpoints_breakpoint_group_name_exists($machine_name) {
  // Check for reserved words.
  if ($machine_name == 'global' || $machine_name == 'add') {
    return TRUE;
  }
  // Check if group name is used before.
  $group_check = breakpoints_breakpoint_group_load($machine_name);
  if ($group_check && isset($group_check->machine_name) && !empty($group_check->machine_name)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Load all breakpoint groups.
 */
function breakpoints_breakpoint_group_load_all() {
  $breakpointsets = array();
  $name = 'breakpoints.' . BREAKPOINTS_GROUP . '.';
  $breakpointset_names = config_get_storage_names_with_prefix($name);
  foreach ($breakpointset_names as $breakpointset_name) {
    $breakpointsets[$breakpointset_name] = breakpoints_breakpoint_group_load_by_fullkey($breakpointset_name);
  }
  return $breakpointsets;
}

/**
 * Load a single breakpoint group.
 */
function breakpoints_breakpoint_group_load($machine_name) {
  $name = 'breakpoints.' . BREAKPOINTS_GROUP . '.' . $machine_name;
  return breakpoints_breakpoint_group_load_by_fullkey($name);
}

/**
 * Load a single breakpoint group using the full config key.
 */
function breakpoints_breakpoint_group_load_by_fullkey($name) {
  $config = config($name);
  if ($config->isNew()) {
    return FALSE;
  }
  $data = $config->get();
  return (object)$data;
}

/**
 * Save a single breakpoint group.
 */
function breakpoints_breakpoint_group_save($breakpointset) {
  $name = 'breakpoints.' . BREAKPOINTS_GROUP . '.' . $breakpointset->machine_name;
  $config = config($name);
  $is_new = $config->isNew();

  $config->set('machine_name', $breakpointset->machine_name);
  $config->set('name', $breakpointset->name);
  $config->set('type', $breakpointset->type);
  $config->set('overridden', $breakpointset->overridden);
  $config->set('breakpoints', $breakpointset->breakpoints); // weight + key
  $config->save();
  return $is_new ? SAVED_NEW : SAVED_UPDATED;
}

/**
 * Delete a single breakpoint group.
 */
function breakpoints_breakpoint_group_delete($breakpointset) {
  $name = 'breakpoints.' . BREAKPOINTS_GROUP . '.' . $breakpointset->machine_name;
  return breakpoints_breakpoint_group_delete_by_fullkey($name);
}

/**
 * Delete a single breakpoint group by fullkey.
 */
function breakpoints_breakpoint_group_delete_by_name($machine_name) {
  $name = 'breakpoints.' . BREAKPOINTS_GROUP . '.' . $machine_name;
  return breakpoints_breakpoint_group_delete_by_fullkey($name);
}

/**
 * Delete a single breakpoint group by fullkey.
 */
function breakpoints_breakpoint_group_delete_by_fullkey($key) {
  $config = config($key);
  if ($config && !$config->isNew()) {
    $config->delete();
  }
}

/**
 * Reload the breakpoints as defined by the group.
 */
function breakpoints_breakpoints_group_reload(&$group) {
  switch ($group->type) {
    case BREAKPOINTS_SOURCE_TYPE_THEME:
      // delete all breakpoints defined by this theme.
      $breakpoints = breakpoints_breakpoint_load_all_theme($group->machine_name);
      foreach ($breakpoints as $breakpoint) {
        breakpoints_breakpoint_delete($breakpoint, $group->machine_name);
      }

      // reload all breakpoints from theme.info.
      $reloaded_group = breakpoints_breakpoints_group_reload_from_theme($group->machine_name);
      $group->breakpoints = $reloaded_group->breakpoints;
      breakpoints_breakpoint_group_save($group);
      break;
  }
}

function breakpoints_breakpoints_group_reload_from_theme($theme_key) {
  // Clear caches so theme.info is fresh.
  system_rebuild_theme_data();
  drupal_theme_rebuild();

  $themes = list_themes();
  if (isset($themes[$theme_key]->info['breakpoints'])) {
    $weight = 0;
    $theme_settings = $themes[$theme_key]->info['breakpoints'];
    // Build a group for each theme
    $breakpointset = breakpoints_breakpoint_group_empty_object();
    $breakpointset->machine_name = $theme_key;
    $breakpointset->name = $themes[$theme_key]->info['name'];
    $breakpointset->type = BREAKPOINTS_SOURCE_TYPE_THEME;
    foreach ($theme_settings as $name => $media_query) {
      $breakpoint = breakpoints_breakpoint_empty_object();
      $breakpoint->name = $name;
      $breakpoint->breakpoint = $media_query;
      $breakpoint->source = $theme_key;
      $breakpoint->source_type = 'theme';
      $breakpoint->theme = '';
      $breakpoint->status = TRUE;
      $breakpoint->weight = $weight++;
      $breakpoint->machine_name = breakpoints_breakpoint_config_name($breakpoint);
      breakpoints_breakpoint_save($breakpoint);
      $breakpointset->breakpoints[] = $breakpoint->machine_name;
    }
    return $breakpointset;
  }
}

/**
 * Revert the breakpoints of a group.
 */
function breakpoints_breakpoints_group_revert(&$group) {
  breakpoints_breakpoints_group_reload($group);
  $group->overridden = 0;
  breakpoints_breakpoint_group_save($group);
}

/**
 * Duplicate a group.
 */
function breakpoints_breakpoints_group_duplicate($group, $new_name, $new_machine_name) {
  $new_group = breakpoints_breakpoint_group_empty_object();
  $new_group->machine_name = $new_machine_name;
  $new_group->name = $new_name;
  $new_group->type = BREAKPOINTS_SOURCE_TYPE_CUSTOM;
  $new_group->breakpoints = $group->breakpoints;
  breakpoints_breakpoint_group_save($new_group);
  return $new_group;
}

/**
 * Override the breakpoints of a group.
 */
function breakpoints_breakpoints_group_override($group) {
  foreach ($group->breakpoints as $key => $breakpoint_name) {
    $breakpoint = breakpoints_breakpoint_load_by_fullkey($breakpoint_name);
    $old_breakpoint = clone $breakpoint;
    if ($breakpoint->source_type == BREAKPOINTS_SOURCE_TYPE_THEME && $breakpoint->source == $group->machine_name) {
      $breakpoint->source_type = BREAKPOINTS_SOURCE_TYPE_CUSTOM;

      // make sure it doesn't already exists.
      if (breakpoints_breakpoint_load_by_fullkey(breakpoints_breakpoint_config_name($breakpoint)) === FALSE) {
        $breakpoint = breakpoints_breakpoint_save($breakpoint);
      }

      // Add to the group and delete old breakpoint.
      $group->breakpoints[$key] = breakpoints_breakpoint_config_name($breakpoint);
      breakpoints_breakpoint_delete($old_breakpoint);
    }
  }
  $group->overridden = 1;
  breakpoints_breakpoint_group_save($group);
}

/**
 * Export breakpoints ready for theme.info inclusion.
 */
function breakpoints_breakpoints_group_exporttotheme(&$group) {
  $export = array();
  foreach ($group->breakpoints as $breakpoint_name) {
    $breakpoint = breakpoints_breakpoint_load_by_fullkey($breakpoint_name);
    if ($breakpoint && $breakpoint->status) {
      $export[$breakpoint->name] = $breakpoint->breakpoint;
    }
  }
  return $export;
}

/**
 * Get a list of available breakpoints from a specified theme.
 *
 * @param $theme_key
 *   The name of a theme.
 * @return
 *   An array of breakpoints in the form $breakpoint['name'] = 'media query'.
 */
function breakpoints_get_theme_breakpoint_list($theme_key) {
  $themes = list_themes();
  if (!isset($themes[$theme_key])) {
    return array();
  }

  $config = config($theme_key . '.breakpoints');
  if ($config) {
    return $config->get();
  }
  return array();
}

/**
 * Implements hook_entity_info().
 */
function breakpoints_entity_info() {
  // Breakpoint
  $types['breakpoints_breakpoint'] = array(
    'label' => 'Breakpoint',
    'entity class' => 'Drupal\breakpoints\Breakpoint',
    'controller class' => 'Drupal\config\ConfigStorageController',
    'form controller class' => array(
      'default' => 'Drupal\breakpoints\BreakpointFormController',
    ),
    // 'list controller class' => 'Drupal\breakpoints\BreakpointListController',
    'list controller class' => 'Drupal\config\ConfigEntityListController',
    'list path' => 'admin/config/media/breakpoints/breakpoint',
    'uri callback' => 'breakpoints_breakpoint_uri',
    'config prefix' => 'breakpoints.breakpoint',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'label',
      'uuid' => 'uuid',
    ),
  );

  // Breakpoint set
  $types['breakpoints_breakpointset'] = array(
    'label' => 'Breakpoint Set',
    'entity class' => 'Drupal\breakpoints\BreakpointSet',
    'controller class' => 'Drupal\config\ConfigStorageController',
    'form controller class' => array(
      'default' => 'Drupal\breakpoints\BreakpointSetFormController',
    ),
    'list controller class' => 'Drupal\config\ConfigEntityListController',
    'list path' => 'admin/config/media/breakpoints/breakpointset',
    'uri callback' => 'breakpoints_breakpoint_set_uri',
    'config prefix' => 'breakpoints.breakpointset',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'label',
      'uuid' => 'uuid',
    ),
  );

  return $types;
}

/**
 * Load one breakpoint set by its identifier.
 */
function breakpoints_breakpointset_load($id) {
  return entity_load('breakpoints_breakpointset', $id);
}

/**
 * Load all breakpooint sets.
 */
function breakpoints_breakpointset_load_all() {
  $breakpointsets = entity_load_multiple('breakpoints_breakpointset');
  return $breakpointsets;
}

/**
 * Load one breakpoint by its identifier.
 */
function breakpoints_breakpoint_load($id) {
  return entity_load('breakpoints_breakpoint', $id);
}

/**
 * Load all breakpoints.
 */
function breakpoints_breakpoint_load_all() {
  $breakpoints = entity_load_multiple('breakpoints_breakpoint');
  return $breakpoints;
}

/**
 * Implements hook_menu().
 */
function breakpoints_menu() {
  $items = array();
  $items['admin/config/media/breakpoints'] = array(
    'title' => t('Manage breakpoints'),
    'description' => t('Manage breakpoints and breakpoint sets.'),
    'page callback' => 'breakpoints_admin_block_page',
    'access arguments' => array('administer breakpoints'),
  );
  $items['admin/config/media/breakpoints/breakpoint'] = array(
    'title' => 'Breakpoints',
    'page callback' => 'breakpoints_breakpoint_page',
    'description' => 'Manage breakpoints',
    'access arguments' => array('administer breakpoints'),
    'weight' => 10,
    'file' => 'breakpoints.breakpoint.admin.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['admin/config/media/breakpoints/breakpoint/add'] = array(
    'title' => 'Add breakpoint',
    'page callback' => 'breakpoints_breakpoint_page_add',
    'access callback' => 'user_access',
    'access arguments' => array('administer breakpoints'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'breakpoints.breakpoint.admin.inc',
  );
  $items['admin/config/media/breakpoints/breakpoint/%breakpoints_breakpoint'] = array(
    'title' => 'Edit breakpoint',
    'page callback' => 'breakpoints_breakpoint_page_edit',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('administer breakpoints'),
    'type' => MENU_CALLBACK,
    'file' => 'breakpoints.breakpoint.admin.inc',
  );
  $items['admin/config/media/breakpoints/breakpoint/%breakpoints_breakpoint/edit'] = array(
    'title' => 'Edit breakpoint',
    'page callback' => 'breakpoints_breakpoint_page_edit',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('administer breakpoints'),
    'type' => MENU_CALLBACK,
    'file' => 'breakpoints.breakpoint.admin.inc',
  );
  $items['admin/config/media/breakpoints/breakpoint/%breakpoints_breakpoint/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breakpoints_breakpoint_delete_confirm', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer breakpoints'),
    'type' => MENU_CALLBACK,
    'file' => 'breakpoints.breakpoint.admin.inc',
  );

  // Breakpoint set
  $items['admin/config/media/breakpoints/breakpointset'] = array(
    'title' => 'Breakpoint Sets',
    'description' => 'Manage breakpoint sets',
    'access arguments' => array('administer breakpoints'),
    'weight' => 10,
    'page callback' => 'breakpoints_breakpointset_page',
    'file' => 'breakpoints.breakpointset.admin.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['admin/config/media/breakpoints/breakpointset/add'] = array(
    'title' => 'Add breakpoint set',
    'page callback' => 'breakpoints_breakpointset_page_add',
    'access callback' => 'user_access',
    'access arguments' => array('administer breakpoints'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'breakpoints.breakpointset.admin.inc',
  );
  $items['admin/config/media/breakpoints/breakpointset/%breakpoints_breakpointset/edit'] = array(
    'title' => 'Edit breakpoint set',
    'page callback' => 'breakpoints_breakpointset_page_edit',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('administer breakpoints'),
    'type' => MENU_CALLBACK,
    'file' => 'breakpoints.breakpointset.admin.inc',
  );
  $items['admin/config/media/breakpoints/breakpointset/%breakpoints_breakpointset/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breakpoints_breakpointset_delete_confirm', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer breakpoints'),
    'type' => MENU_CALLBACK,
    'file' => 'breakpoints.breakpointset.admin.inc',
  );

  return $items;
}

function breakpoints_breakpoint_uri(Breakpoint $breakpoint) {
  return array(
    'path' => 'admin/config/media/breakpoints/breakpoint/' . $breakpoint->id(),
  );
}

function breakpoints_breakpoint_set_uri(BreakpointSet $breakpointset) {
  return array(
    'path' => 'admin/config/media/breakpoints/breakpointset/' . $breakpointset->id(),
  );
}

function breakpoints_admin_block_page() {
  $content = array(
    menu_get_item('admin/config/media/breakpoints/breakpoint'),
    menu_get_item('admin/config/media/breakpoints/breakpointset'),
  );
  return theme('admin_block_content', array('content' => $content));

}
