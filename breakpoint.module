<?php

/**
 * @file
 * Manage breakpoints and breakpoint groups for responsive designs.
 */

use \Drupal\breakpoint\Breakpoint;
use \Drupal\breakpoint\BreakpointGroup;

/**
 * Implements hook_enable().
 *
 * Import breakpoints from all enabled themes.
 */
function breakpoint_enable() {
  config_install_default_config('module', 'breakpoint');
  $themes = list_themes();
  breakpoint_themes_enabled(array_keys($themes));
  $modules = module_list();
  breakpoint_modules_enabled($modules);
}

/**
 * Implements hook_themes_enabled().
 *
 * Import breakpoints from all new enabled themes.
 *
 * @param array $theme_list
 *   An array of theme names.
 */
function breakpoint_themes_enabled($theme_list) {
  $themes = list_themes();
  foreach ($theme_list as $theme_key) {
    if ($themes[$theme_key]->status) {
      $theme_breakpoints = breakpoint_get_theme_breakpoint_list($theme_key);
      if (!empty($theme_breakpoints)) {
        if ($breakpoint_group = _breakpoint_import_breakpoints($themes[$theme_key]->info['name'], $theme_key, Breakpoint::SOURCE_TYPE_THEME, $theme_breakpoints)) {
          $uri = $breakpoint_group->uri();
          if ($uri) {
            $uri_options = $uri;
            unset($uri_options['path']);
            $uri = $uri['path'];
          }
          $message = t('The breakpoints from theme %theme are imported.', array(
            '%theme' => check_plain($themes[$theme_key]->info['name']),
          ));
          if (module_exists('breakpoint_ui') && $uri) {
            $message .= '<p>' . l(t('A new breakpoint group is created for theme %theme.', array(
              '%theme' => check_plain($themes[$theme_key]->info['name']),
            )), $uri, $uri_options);
          }
          drupal_set_message($message, 'status');
        }
      }

      // Import custom groups.
      _breakpoint_import_breakpoint_groups($theme_key, Breakpoint::SOURCE_TYPE_THEME);
    }
  }
}

/**
 * Implements hook_themes_disabled().
 *
 * Remove breakpoints from all disabled themes.
 *
 * @param array $theme_list
 *   An array of theme names.
 */
function breakpoint_themes_disabled($theme_list) {
  _breakpoint_delete_breakpoints($theme_list, Breakpoint::SOURCE_TYPE_THEME);
}

/**
 * Implements hook_modules_enabled().
 *
 * Import breakpoints from all new enabled modules.
 *
 * @param $modules
 *   An array of the modules that were enabled.
 */
function breakpoint_modules_enabled($modules) {
  foreach ($modules as $module) {
    $module_breakpoints = breakpoint_get_module_breakpoint_list($module);
    if (!empty($module_breakpoints)) {
      if ($breakpoint_group = _breakpoint_import_breakpoints($module, $module, Breakpoint::SOURCE_TYPE_MODULE, $module_breakpoints)) {
        $uri = $breakpoint_group->uri();
        if ($uri) {
          $uri_options = $uri;
          unset($uri_options['path']);
          $uri = $uri['path'];
        }
        $message = t('The breakpoints from module %module are imported.', array(
          '%module' => $module,
        ));
        if (module_exists('breakpoint_ui') && $uri) {
          $message .= '<p>' . l(t('A new breakpoint group is created for module %module.', array(
            '%module' => $module,
          )), $uri, $uri_options);
        }
        drupal_set_message($message, 'status');
      }
    }

    // Import custom groups.
    _breakpoint_import_breakpoint_groups($module, Breakpoint::SOURCE_TYPE_MODULE);
  }
}

/**
 * Implements hook_modules_uninstalled().
 *
 * Remove breakpoints from all uninstalled modules.
 *
 * @param $modules
 *   An array of the modules that were uninstalled.
 */
function breakpoint_modules_uninstalled($modules) {
  _breakpoint_delete_breakpoints($modules, Breakpoint::SOURCE_TYPE_MODULE);
}

/**
 * Import breakpoints from theme or module.
 *
 * @param string $label
 *   Name of the breakpoint group.
 * @param string $id
 *   Id of the breakpoint group.
 * @param string $sourceType
 *   Either Breakpoint::SOURCE_TYPE_THEME or Breakpoint::SOURCE_TYPE_MODULE.
 * @param array $media_queries
 *   Array of media queries keyed by id.
 *
 * @return Drupal\breakpoint\BreakpointGroup|false
 *   Returns the new breakpoint group if one is created.
 */
function _breakpoint_import_breakpoints($label, $id, $source_type, $media_queries) {
  if (!empty($media_queries)) {
    $weight = 0;
    // Build a breakpoint group.
    $breakpoint_group = new BreakpointGroup();
    $breakpoint_group->id = $id;
    $breakpoint_group->label = $label;
    $breakpoint_group->sourceType = $source_type;
    foreach ($media_queries as $name => $media_query) {
      $breakpoint = new Breakpoint;
      $breakpoint->name = $name;
      $breakpoint->label = drupal_ucfirst($name);
      $breakpoint->mediaQuery = $media_query;
      $breakpoint->source = $id;
      $breakpoint->sourceType = $source_type;
      $breakpoint->status = TRUE;
      $breakpoint->weight = $weight++;
      $breakpoint->save();
      $breakpoint_group->breakpoints[$breakpoint->id()] = $breakpoint;
    }
    $breakpoint_group->save();
    return $breakpoint_group;
  }
  return FALSE;
}

/**
 * Import breakpoint groups from theme or module.
 *
 * @param string $group_id
 *   Id of the breakpoint group.
 * @param string $sourceType
 *   Either Breakpoint::SOURCE_TYPE_THEME or Breakpoint::SOURCE_TYPE_MODULE.
 *
 * @return boolean
 */
function _breakpoint_import_breakpoint_groups($group_id, $source_type) {
  $breakpoint_groups = config($group_id . '.breakpoint_groups');
  if ($breakpoint_groups) {
    foreach ($breakpoint_groups->get() as $id => $data) {
      // Breakpoints is mandatory.
      if (isset($data['breakpoints']) && !empty($data['breakpoints'])) {
        $breakpoint_group = new BreakpointGroup();
        $breakpoint_group->sourceType = $source_type;
        $breakpoint_group->source = $group_id;
        $breakpoint_group->id = $id;
        if (isset($data['label']) && !empty($data['label'])) {
          $breakpoint_group->label = $data['label'];
        }
        else {
          $breakpoint_group->label = drupal_ucfirst($data['label']);
        }
        foreach ($data['breakpoints'] as $breakpoint_id => $multipliers) {
          // Check if breakpoint exists, assume short name.
          $breakpoint = entity_load('breakpoint', $source_type . '.' . $group_id . '.' . $breakpoint_id);
          // If the breakpoint doesn't exist, try using the full name.
          if (!$breakpoint) {
            $breakpoint = entity_load('breakpoint', $breakpoint_id);
          }
          if ($breakpoint) {
            // Check if the multipliers are set, if not set them now.
            if (is_array($multipliers) && !empty($multipliers)) {
              // Check settings first.
              $settings = breakpoint_settings();
              $defined_multipliers = $settings->multipliers;
              $new_multipliers = array_diff($multipliers, $defined_multipliers);
              if (!empty($new_multipliers)) {
                $defined_multipliers = array_merge($defined_multipliers, $new_multipliers);
                breakpoint_settings_save_multipliers($defined_multipliers);
              }

              // Check breakpoint multipliers.
              $multipliers = drupal_map_assoc(array_values($multipliers));
              $new_multipliers = array_diff($multipliers, $breakpoint->multipliers);
              if (!empty($new_multipliers)) {
                $breakpoint->multipliers += $new_multipliers;
                $breakpoint->save();
              }
            }

            // Add breakpoint to group.
            $breakpoint_group->breakpoints[$breakpoint->id()] = $breakpoint;
            $breakpoint_group->save();
          }
        }
      }
    }
  }
}

/**
 * Remove breakpoints from all disabled themes or uninstalled modules.
 *
 * @param array $ids
 *   Id's of the breakpoint group.
 * @param string $sourceType
 *   Either Breakpoint::SOURCE_TYPE_THEME or Breakpoint::SOURCE_TYPE_MODULE.
 *
 */
function _breakpoint_delete_breakpoints($ids, $source_type) {
  $breakpoint_groups = entity_load_multiple('breakpoint_group', $ids);
  foreach ($breakpoint_groups as $breakpoint_group) {
    if ($breakpoint_group->sourceType == $source_type) {
      // delete the default group.
      $breakpoint_group->delete();

      // delete all breakpoints defined by this theme/module.
      $names = drupal_container()->get('config.storage')->listAll('breakpoint.breakpoint.' . $source_type . '.' . $breakpoint_group->id() . '.');
      $entity_info = entity_get_info('breakpoint');

      foreach ($names as &$name) {
        $name = drupal_substr($name, drupal_strlen($entity_info['config prefix']) + 1);
      }
      $breakpoints = entity_load_multiple('breakpoint', $names);

      foreach ($breakpoints as $breakpoint) {
        if ($breakpoint->sourceType == $source_type && $breakpoint->source = $breakpoint_group->id) {
          $breakpoint->delete();
        }
      }
    }
  }
  // Deletet groups defined by a module/theme even if that module/theme didn't
  // define any breakpoints.
  foreach ($ids as $id) {
    // delete all breakpoint groups defined by the theme or module.
    _breakpoint_delete_breakpoint_groups($id, $source_type);
  }
}

/**
 * Remove breakpoint groups from all disabled themes or uninstalled modules.
 *
 * @param array $group_id
 *   Id of the breakpoint group.
 * @param string $sourceType
 *   Either Breakpoint::SOURCE_TYPE_THEME or Breakpoint::SOURCE_TYPE_MODULE.
 *
 */
function _breakpoint_delete_breakpoint_groups($group_id, $source_type) {
  $breakpoint_groups = entity_load_multiple('breakpoint_group');
  foreach ($breakpoint_groups as $breakpoint_group) {
    if ($breakpoint_group->sourceType == $source_type && $breakpoint_group->source == $group_id) {
      $breakpoint_group->delete();
    }
  }
}

/**
 * Load general settings.
 *
 * @return array
 *   array containing general breakpoint settings.
 */
function breakpoint_settings() {
  $config = config('breakpoint');
  if ($config->isNew()) {
    return FALSE;
  }
  return (object)$config->get();
}

/**
 * Save multipliers to settings.
 *
 * @param array $multipliers
 *   array containing multipliers.
 */
function breakpoint_settings_save_multipliers($multipliers) {
  $config = config('breakpoint');
  $config->set('multipliers', $multipliers);
  $config->save();
}

/**
 * Reload breakpoint groups as they were defined in the theme.
 *
 * @param string $theme_key
 *   The name of the theme.
 *
 * @return BreakpointGroup
 *   Returns a BreakpointGroup containing the breakpoints defined by the theme.
 */
function breakpoint_group_reload_from_theme($theme_key) {
  // Clear caches so theme info is fresh.
  system_rebuild_theme_data();
  drupal_theme_rebuild();

  $themes = list_themes();
  if ($themes[$theme_key]->status) {
    $theme_breakpoints = breakpoint_get_theme_breakpoint_list($theme_key);
    if (!empty($theme_breakpoints)) {
      $weight = 0;
      // Build a group for the theme.
      $breakpoint_group = new BreakpointGroup();
      $breakpoint_group->id = $theme_key;
      $breakpoint_group->label = $themes[$theme_key]->info['name'];
      $breakpoint_group->sourceType = Breakpoint::SOURCE_TYPE_THEME;
      foreach ($theme_breakpoints as $name => $media_query) {
        $breakpoint = new Breakpoint;
        $breakpoint->name = $name;
        $breakpoint->label = drupal_ucfirst($name);
        $breakpoint->mediaQuery = $media_query;
        $breakpoint->source = $theme_key;
        $breakpoint->sourceType = Breakpoint::SOURCE_TYPE_THEME;
        $breakpoint->status = TRUE;
        $breakpoint->weight = $weight++;
        $breakpoint->save();
        $breakpoint_group->breakpoints[$breakpoint->getConfigName()] = $breakpoint;
      }
    }
    return $breakpoint_group;
  }
  return FALSE;
}

/**
 * Get a list of available breakpoints from a specified theme.
 *
 * @param string $theme_key
 *   The name of the theme.
 *
 * @return array
 *   An array of breakpoints in the form $breakpoint['name'] = 'media query'.
 */
function breakpoint_get_theme_breakpoint_list($theme_key) {
  $themes = list_themes();
  if (!isset($themes[$theme_key])) {
    return array();
  }

  $config = config($theme_key . '.breakpoints');
  if ($config) {
    return $config->get();
  }
  return array();
}

/**
 * Get a list of available breakpoints from a specified module.
 *
 * @param string $module
 *   The name of the module.
 *
 * @return array
 *   An array of breakpoints in the form $breakpoint['name'] = 'media query'.
 */
function breakpoint_get_module_breakpoint_list($module) {
  if (!module_exists($module)) {
    return array();
  }

  $config = config($module . '.breakpoints');
  if ($config) {
    return $config->get();
  }
  return array();
}

/**
 * Implements hook_entity_info().
 */
function breakpoint_entity_info() {
  // Breakpoint.
  $types['breakpoint'] = array(
    'label' => 'Breakpoint',
    'entity class' => 'Drupal\breakpoint\Breakpoint',
    'controller class' => 'Drupal\Core\Config\Entity\ConfigStorageController',
    'config prefix' => 'breakpoint.breakpoint',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'label',
      'uuid' => 'uuid',
    ),
  );

  // Breakpoint group.
  $types['breakpoint_group'] = array(
    'label' => 'Breakpoint group',
    'entity class' => 'Drupal\breakpoint\BreakpointGroup',
    'controller class' => 'Drupal\breakpoint\BreakpointGroupController',
    'config prefix' => 'breakpoint.breakpoint_group',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'label',
      'uuid' => 'uuid',
    ),
  );

  return $types;
}

/**
 * Load one breakpoint group by its identifier.
 *
 * @param string $id
 *   The id of the breakpoint group to load.
 *
 * @return Drupal\breakpoint\BreakpointGroup|false
 *   The breakpoint group, or FALSE if there is no entity with the given id.
 *
 * @todo Needed for menu_callback and machine_name.
 *
 * @see http://drupal.org/node/1798214
 */
function breakpoint_group_load($id) {
  return entity_load('breakpoint_group', $id);
}

/**
 * Load one breakpoint by its identifier.
 *
 * @param int $id
 *   The id of the breakpoint to load.
 *
 * @return Drupal\breakpoint\Breakpoint
 *   The entity object, or FALSE if there is no entity with the given id.
 *
 * @todo Needed for menu_callback and machine_name.
 *
 * @see http://drupal.org/node/1798214
 *
 */
function breakpoint_load($id) {
  return entity_load('breakpoint', $id);
}

/**
 * Load all breakpoint groups as select options.
 *
 * @return array
 *   An array containing breakpoint group labels indexed by their ids.
 */
function breakpoint_group_select_options() {
  $options = array();
  $breakpoint_groups = entity_load_multiple('breakpoint_group');
  foreach ($breakpoint_groups as $breakpoint_group) {
    $options[$breakpoint_group->id()] = $breakpoint_group->label();
  }
  asort($options);
  return $options;
}

/**
 * Load all breakpoints as select options.
 *
 * @return array
 *   An array containing breakpoints indexed by their ids.
 */
function breakpoint_select_options() {
  $options = array();
  $breakpoints = entity_load_multiple('breakpoint');
  foreach ($breakpoints as $breakpoint) {
    $options[$breakpoint->id()] = $breakpoint->label() . ' (' . $breakpoint->source . ' - ' . $breakpoint->sourceType .   ') [' . $breakpoint->mediaQuery . ']';
  }

  return $options;
}
