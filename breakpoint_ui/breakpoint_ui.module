<?php
/**
 * @file
 * Provide structure for the administrative interface for breakpoints.
 */

use \Drupal\breakpoint\Breakpoint;
use \Drupal\breakpoint\BreakpointGroup;

/**
 * Implements hook_permission().
 */
function breakpoint_ui_permission() {
  return array(
    'administer breakpoints' => array(
      'title' => t('Administer Breakpoints'),
      'description' => t('Administer all breakpoints'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function breakpoint_ui_menu() {
  $items = array();
  $items['admin/config/media/breakpoint'] = array(
    'title' => t('Manage breakpoints'),
    'description' => t('Manage breakpoints and breakpoint groups.'),
    'page callback' => 'breakpoint_ui_admin_block_page',
    'access arguments' => array('administer breakpoints'),
  );
  $items['admin/config/media/breakpoint/breakpoint'] = array(
    'title' => 'Breakpoints',
    'page callback' => 'breakpoint_ui_breakpoint_page',
    'description' => 'Manage breakpoints',
    'access arguments' => array('administer breakpoints'),
    'weight' => 10,
    'file' => 'breakpoint_ui.breakpoint.admin.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['admin/config/media/breakpoint/breakpoint/add'] = array(
    'title' => 'Add breakpoint',
    'page callback' => 'breakpoint_ui_breakpoint_page_add',
    'access callback' => 'user_access',
    'access arguments' => array('administer breakpoints'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'breakpoint_ui.breakpoint.admin.inc',
  );
  $items['admin/config/media/breakpoint/breakpoint/%breakpoint/edit'] = array(
    'title' => 'Edit breakpoint',
    'page callback' => 'breakpoint_ui_breakpoint_page_edit',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('administer breakpoints'),
    'file' => 'breakpoint_ui.breakpoint.admin.inc',
  );
  $items['admin/config/media/breakpoint/breakpoint/%breakpoint/%'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breakpoint_ui_breakpoint_action_confirm', 5, 6),
    'access callback' => 'breakpoint_ui_breakpoint_access',
    'access arguments' => array(5, 6),
    'file' => 'breakpoint_ui.breakpoint.admin.inc',
  );


  // Breakpoint group
  $items['admin/config/media/breakpoint/breakpoint_group'] = array(
    'title' => 'Breakpoint groups',
    'description' => 'Manage breakpoint groups',
    'access arguments' => array('administer breakpoints'),
    'weight' => 10,
    'page callback' => 'breakpoint_ui_breakpoint_group_page',
    'file' => 'breakpoint_ui.breakpoint_group.admin.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['admin/config/media/breakpoint/breakpoint_group/add'] = array(
    'title' => 'Add breakpoint group',
    'page callback' => 'breakpoint_ui_breakpoint_group_page_add',
    'access callback' => 'user_access',
    'access arguments' => array('administer breakpoints'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'breakpoint_ui.breakpoint_group.admin.inc',
  );
  $items['admin/config/media/breakpoint/breakpoint_group/%breakpoint_group/edit'] = array(
    'title' => 'Edit breakpoint group',
    'page callback' => 'breakpoint_ui_breakpoint_group_page_edit',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('administer breakpoints'),
    'file' => 'breakpoint_ui.breakpoint_group.admin.inc',
  );
  $items['admin/config/media/breakpoint/breakpoint_group/%breakpoint_group/duplicate'] = array(
    'title' => 'Duplicate breakpoint group',
    'page callback' => 'breakpoint_ui_breakpoint_page_duplicate',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('administer breakpoints'),
    'file' => 'breakpoint_ui.breakpoint_group.admin.inc',
  );
  $items['admin/config/media/breakpoint/breakpoint_group/%breakpoint_group/%'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breakpoint_ui_breakpoint_group_action_confirm', 5, 6),
    'access callback' => 'breakpoint_ui_breakpoint_group_access',
    'access arguments' => array(5, 6),
    'file' => 'breakpoint_ui.breakpoint_group.admin.inc',
  );

   $items['admin/config/media/breakpoint/multipliers'] = array(
    'title' => 'Multipliers',
    'description' => 'Manage multipliers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breakpoint_ui_multipliers_form'),
    'access arguments' => array('administer breakpoints'),
    'file' => 'breakpoint_ui.multiplier.admin.inc',
    'weight' => 20,
  );

  $items['admin/config/media/breakpoint/multipliers/%/delete'] = array(
    'title' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breakpoint_ui_admin_multiplier_delete_form', 5),
    'access arguments' => array('administer breakpoints'),
    'file' => 'breakpoint_ui.multiplier.admin.inc',
    'weight' => 15,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function breakpoint_ui_theme() {
  return array(
    'breakpoint_ui_multipliers_table_form' => array(
      'render element' => 'form',
      'theme_key' => NULL,
      'file' => 'breakpoint_ui.multiplier.admin.inc'
    ),
    'breakpoint_ui_add_breakpoint_table_form' => array(
      'render element' => 'form',
      'theme_key' => NULL,
      'file' => 'breakpoint_ui.breakpoint_group.admin.inc',
    )
  );
}

/**
 * Breakpoint uri callback.
 */
function breakpoint_uri(Breakpoint $breakpoint) {
  return array(
    'path' => 'admin/config/media/breakpoint/breakpoint/' . $breakpoint->id(),
  );
}

/**
 * Access callback.
 *
 * @see breakpoint_ui_menu()
 */
function breakpoint_ui_breakpoint_access (Breakpoint $breakpoint, $action, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  return
    $action != 'delete' ?
    user_access('administer breakpoints', $account) :
    user_access('administer breakpoints', $account) && $breakpoint->sourceType === Breakpoint::SOURCE_TYPE_CUSTOM;
}

/**
 * Access callback.
 *
 * @see breakpoint_ui_menu()
 */
function breakpoint_ui_breakpoint_group_access (BreakpointGroup $breakpoint_group, $action, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  return
    $action != 'delete' ?
    user_access('administer breakpoints', $account) :
    user_access('administer breakpoints', $account) && $breakpoint_group->sourceType === Breakpoint::SOURCE_TYPE_CUSTOM;
}

/**
 * Breakpointset uri callback.
 */
function breakpoint_group_uri(BreakpointGroup $breakpoint_group) {
  return array(
    'path' => 'admin/config/media/breakpoint/breakpoint_group/' . $breakpoint_group->id(),
  );
}

/**
 * Page callback.
 */
function breakpoint_ui_admin_block_page() {
  $content = array(
    menu_get_item('admin/config/media/breakpoint/breakpoint'),
    menu_get_item('admin/config/media/breakpoint/breakpoint_group'),
    menu_get_item('admin/config/media/breakpoint/multipliers'),
  );
  return theme('admin_block_content', array('content' => $content));

}

/**
 * Implements hook_entity_info_alter().
 */
function breakpoint_ui_entity_info_alter(&$entity_info) {
  watchdog('alter', 'alter!');
  //Breakpoint
  $entity_info['breakpoint']['form controller class']['default'] = 'Drupal\breakpoint_ui\BreakpointFormController';
  $entity_info['breakpoint']['list controller class'] = 'Drupal\breakpoint_ui\BreakpointListController';
  $entity_info['breakpoint']['list path'] = 'admin/config/media/breakpoint/breakpoint';
  $entity_info['breakpoint']['uri callback'] = 'breakpoint_uri';

  //BreakpointGroup
  $entity_info['breakpoint_group']['form controller class']['default'] = 'Drupal\breakpoint_ui\BreakpointGroupFormController';
  $entity_info['breakpoint_group']['form controller class']['duplicate'] = 'Drupal\breakpoint_ui\BreakpointGroupFormController';
  $entity_info['breakpoint_group']['list controller class'] = 'Drupal\breakpoint_ui\BreakpointGroupListController';
  $entity_info['breakpoint_group']['list path'] = 'admin/config/media/breakpoint/breakpoint_group';
  $entity_info['breakpoint_group']['uri callback'] = 'breakpoint_group_uri';
}
